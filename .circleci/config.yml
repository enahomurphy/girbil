version: 2.1

orbs:
  aws-code-deploy: circleci/aws-code-deploy@1.0.0
  aws-cli: circleci/aws-cli@0.1.22

jobs:
  # STAGING FRONTEND
  deploy-staging-web:
    working_directory: ~/giribil-web
    docker:
      - image: circleci/node:12.16.1 
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Setup Environment Variables
          command: |
            echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID" >> web/.env
            echo "API_URL=https://staging-api.girbil.com" >> web/.env
            echo "export GIRBIL_WEB_STAGING_S3_CLIENT=$GIRBIL_WEB_STAGING_S3_CLIENT" >> $BASH_ENV
            echo "export GIRBIL_WEB_STAGING_CLOUNDFRONT_ID=$GIRBIL_WEB_STAGING_CLOUNDFRONT_ID" >> $BASH_ENV
      - restore_cache:
          key: dependency-cache-{{ checksum "web/package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "shared/package.json" }}
      - run:
          name: Install Web Packages
          command: cd web/ && yarn install
      - save_cache:
          key: dependency-cache-{{ checksum "web/package.json" }}
          paths:
            - ./web/node_modules
      - run:
          name: Install Shared Packages
          command: cd shared/ && yarn install
      - save_cache:
          key: dependency-cache-{{ checksum "shared/package.json" }}
          paths:
            - ./shared/node_modules
      - run:
          name: deploy client app
          command: |
            cd web && sh scripts/deploy-web.sh

  deploy-staging-api:
    docker:
      - image: circleci/node:12.16.1 
    executor: aws-cli/default
    parameters:
      application-name:
        type: string
      bundle-bucket:
        type: string
      bundle-key:
        type: string
      bundle-type:
        default: zip
        type: string
      deployment-group:
        type: string
      deployment-config:
        type: string
        default: CodeDeployDefault.OneAtATime
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          key: dependency-cache-{{ checksum "api/package.json" }}
      - run:
          name: Install Packages
          command: cd api/ && yarn install
      - save_cache:
          key: dependency-cache-{{ checksum "api/package.json" }}
          paths:
            - ./api/node_modules
      - run:
          name: Build Api
          command: |
            cd api
            sudo npm install -g typescript
            sudo tsc
            sudo cp ormconfig.prod.js ormconfig.js
            sudo rm -rf node_modules
            sudo rm -rf src
      - run:
          name: deploy api app
          command: |
            aws deploy push \
              --application-name << parameters.application-name >> \
              --source ./api \
              --s3-location s3://<< parameters.bundle-bucket >>/<< parameters.bundle-key >>.zip
      - run:
          name: deploy api app
          command: |
            ID=$(aws deploy create-deployment \
                    --application-name << parameters.application-name >> \
                    --deployment-group-name << parameters.deployment-group >> \
                    --deployment-config-name << parameters.deployment-config >> \
                    --ignore-application-stop-failures \
                    --file-exists-behavior OVERWRITE \
                    --s3-location bucket=<< parameters.bundle-bucket >>,bundleType=<< parameters.bundle-type >>,key=<< parameters.bundle-key >>.<< parameters.bundle-type >> \
                    --output text \
                    --query '[deploymentId]')
            STATUS=$(aws deploy get-deployment \
                      --deployment-id $ID \
                      --output text \
                      --query '[deploymentInfo.status]')
            while [[ $STATUS == "Created" || $STATUS == "InProgress" || $STATUS == "Pending" || $STATUS == "Queued" || $STATUS == "Ready" ]]; do
              echo "Status: $STATUS..."
              STATUS=$(aws deploy get-deployment \
                        --deployment-id $ID \
                        --output text \
                        --query '[deploymentInfo.status]')
              sleep 5
            done
            if [[ $STATUS == "Succeeded" ]]; then
              EXITCODE=0
              echo "Deployment finished."
            else
              EXITCODE=1
              echo "Deployment failed!"
            fi
            aws deploy get-deployment --deployment-id $ID
            exit $EXITCODE

workflows:
  deploy_staging_web:
    jobs:
      - deploy-staging-web:
          filters:
            branches:
              only: master

  deploy_staging_api:
    jobs:
      - deploy-staging-api:
          application-name: girbil
          bundle-bucket: girbil-server
          bundle-key: girbil-staging
          deployment-group: girbil-staging
          filters:
            branches:
              only: master